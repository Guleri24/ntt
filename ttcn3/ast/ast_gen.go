// Code generated by go generate; DO NOT EDIT.

package ast

import "github.com/nokia/ntt/internal/loc"
func (n *ErrorNode) FirstTok() Token {
	switch {
	case n.From != nil:
		return n.From
	case n.To != nil:
		return n.To
	default:
		return nil
	}
}

func (n *ErrorNode) LastTok() Token {
	switch {
	case n.To != nil:
		return n.To
	case n.From != nil:
		return n.From
	default:
		return nil
	}
}

func (n *ErrorNode) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ErrorNode) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *NodeList) FirstTok() Token {
	switch {
	case len(n.Nodes) > 0:
		return n.Nodes[0].FirstTok()
	default:
		return nil
	}
}

func (n *NodeList) LastTok() Token {
	switch {
	case len(n.Nodes) > 0:
		return n.Nodes[len(n.Nodes)-1].LastTok()
	default:
		return nil
	}
}

func (n *NodeList) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *NodeList) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *Ident) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.Tok2 != nil:
		return n.Tok2
	default:
		return nil
	}
}

func (n *Ident) LastTok() Token {
	switch {
	case n.Tok2 != nil:
		return n.Tok2
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *Ident) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *Ident) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ParametrizedIdent) FirstTok() Token {
	switch {
	case n.Ident != nil:
		return n.Ident.FirstTok()
	case n.Params != nil:
		return n.Params.FirstTok()
	default:
		return nil
	}
}

func (n *ParametrizedIdent) LastTok() Token {
	switch {
	case n.Params != nil:
		return n.Params.LastTok()
	case n.Ident != nil:
		return n.Ident.LastTok()
	default:
		return nil
	}
}

func (n *ParametrizedIdent) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ParametrizedIdent) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ValueLiteral) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *ValueLiteral) LastTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *ValueLiteral) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ValueLiteral) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *CompositeLiteral) FirstTok() Token {
	switch {
	case n.LBrace != nil:
		return n.LBrace
	case len(n.List) > 0:
		return n.List[0].FirstTok()
	case n.RBrace != nil:
		return n.RBrace
	default:
		return nil
	}
}

func (n *CompositeLiteral) LastTok() Token {
	switch {
	case n.RBrace != nil:
		return n.RBrace
	case len(n.List) > 0:
		return n.List[len(n.List)-1].LastTok()
	case n.LBrace != nil:
		return n.LBrace
	default:
		return nil
	}
}

func (n *CompositeLiteral) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *CompositeLiteral) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *UnaryExpr) FirstTok() Token {
	switch {
	case n.Op != nil:
		return n.Op
	case n.X != nil:
		return n.X.FirstTok()
	default:
		return nil
	}
}

func (n *UnaryExpr) LastTok() Token {
	switch {
	case n.X != nil:
		return n.X.LastTok()
	case n.Op != nil:
		return n.Op
	default:
		return nil
	}
}

func (n *UnaryExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *UnaryExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *BinaryExpr) FirstTok() Token {
	switch {
	case n.X != nil:
		return n.X.FirstTok()
	case n.Op != nil:
		return n.Op
	case n.Y != nil:
		return n.Y.FirstTok()
	default:
		return nil
	}
}

func (n *BinaryExpr) LastTok() Token {
	switch {
	case n.Y != nil:
		return n.Y.LastTok()
	case n.Op != nil:
		return n.Op
	case n.X != nil:
		return n.X.LastTok()
	default:
		return nil
	}
}

func (n *BinaryExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *BinaryExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ParenExpr) FirstTok() Token {
	switch {
	case n.LParen != nil:
		return n.LParen
	case len(n.List) > 0:
		return n.List[0].FirstTok()
	case n.RParen != nil:
		return n.RParen
	default:
		return nil
	}
}

func (n *ParenExpr) LastTok() Token {
	switch {
	case n.RParen != nil:
		return n.RParen
	case len(n.List) > 0:
		return n.List[len(n.List)-1].LastTok()
	case n.LParen != nil:
		return n.LParen
	default:
		return nil
	}
}

func (n *ParenExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ParenExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *SelectorExpr) FirstTok() Token {
	switch {
	case n.X != nil:
		return n.X.FirstTok()
	case n.Dot != nil:
		return n.Dot
	case n.Sel != nil:
		return n.Sel.FirstTok()
	default:
		return nil
	}
}

func (n *SelectorExpr) LastTok() Token {
	switch {
	case n.Sel != nil:
		return n.Sel.LastTok()
	case n.Dot != nil:
		return n.Dot
	case n.X != nil:
		return n.X.LastTok()
	default:
		return nil
	}
}

func (n *SelectorExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *SelectorExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *IndexExpr) FirstTok() Token {
	switch {
	case n.X != nil:
		return n.X.FirstTok()
	case n.LBrack != nil:
		return n.LBrack
	case n.Index != nil:
		return n.Index.FirstTok()
	case n.RBrack != nil:
		return n.RBrack
	default:
		return nil
	}
}

func (n *IndexExpr) LastTok() Token {
	switch {
	case n.RBrack != nil:
		return n.RBrack
	case n.Index != nil:
		return n.Index.LastTok()
	case n.LBrack != nil:
		return n.LBrack
	case n.X != nil:
		return n.X.LastTok()
	default:
		return nil
	}
}

func (n *IndexExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *IndexExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *CallExpr) FirstTok() Token {
	switch {
	case n.Fun != nil:
		return n.Fun.FirstTok()
	case n.Args != nil:
		return n.Args.FirstTok()
	default:
		return nil
	}
}

func (n *CallExpr) LastTok() Token {
	switch {
	case n.Args != nil:
		return n.Args.LastTok()
	case n.Fun != nil:
		return n.Fun.LastTok()
	default:
		return nil
	}
}

func (n *CallExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *CallExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *LengthExpr) FirstTok() Token {
	switch {
	case n.X != nil:
		return n.X.FirstTok()
	case n.Len != nil:
		return n.Len
	case n.Size != nil:
		return n.Size.FirstTok()
	default:
		return nil
	}
}

func (n *LengthExpr) LastTok() Token {
	switch {
	case n.Size != nil:
		return n.Size.LastTok()
	case n.Len != nil:
		return n.Len
	case n.X != nil:
		return n.X.LastTok()
	default:
		return nil
	}
}

func (n *LengthExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *LengthExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *RedirectExpr) FirstTok() Token {
	switch {
	case n.X != nil:
		return n.X.FirstTok()
	case n.Tok != nil:
		return n.Tok
	case n.ValueTok != nil:
		return n.ValueTok
	case len(n.Value) > 0:
		return n.Value[0].FirstTok()
	case n.ParamTok != nil:
		return n.ParamTok
	case len(n.Param) > 0:
		return n.Param[0].FirstTok()
	case n.SenderTok != nil:
		return n.SenderTok
	case n.Sender != nil:
		return n.Sender.FirstTok()
	case n.IndexTok != nil:
		return n.IndexTok
	case n.IndexValueTok != nil:
		return n.IndexValueTok
	case n.Index != nil:
		return n.Index.FirstTok()
	case n.TimestampTok != nil:
		return n.TimestampTok
	case n.Timestamp != nil:
		return n.Timestamp.FirstTok()
	default:
		return nil
	}
}

func (n *RedirectExpr) LastTok() Token {
	switch {
	case n.Timestamp != nil:
		return n.Timestamp.LastTok()
	case n.TimestampTok != nil:
		return n.TimestampTok
	case n.Index != nil:
		return n.Index.LastTok()
	case n.IndexValueTok != nil:
		return n.IndexValueTok
	case n.IndexTok != nil:
		return n.IndexTok
	case n.Sender != nil:
		return n.Sender.LastTok()
	case n.SenderTok != nil:
		return n.SenderTok
	case len(n.Param) > 0:
		return n.Param[len(n.Param)-1].LastTok()
	case n.ParamTok != nil:
		return n.ParamTok
	case len(n.Value) > 0:
		return n.Value[len(n.Value)-1].LastTok()
	case n.ValueTok != nil:
		return n.ValueTok
	case n.Tok != nil:
		return n.Tok
	case n.X != nil:
		return n.X.LastTok()
	default:
		return nil
	}
}

func (n *RedirectExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *RedirectExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ValueExpr) FirstTok() Token {
	switch {
	case n.X != nil:
		return n.X.FirstTok()
	case n.Tok != nil:
		return n.Tok
	case n.Y != nil:
		return n.Y.FirstTok()
	default:
		return nil
	}
}

func (n *ValueExpr) LastTok() Token {
	switch {
	case n.Y != nil:
		return n.Y.LastTok()
	case n.Tok != nil:
		return n.Tok
	case n.X != nil:
		return n.X.LastTok()
	default:
		return nil
	}
}

func (n *ValueExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ValueExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ParamExpr) FirstTok() Token {
	switch {
	case n.X != nil:
		return n.X.FirstTok()
	case n.Tok != nil:
		return n.Tok
	case n.Y != nil:
		return n.Y.FirstTok()
	default:
		return nil
	}
}

func (n *ParamExpr) LastTok() Token {
	switch {
	case n.Y != nil:
		return n.Y.LastTok()
	case n.Tok != nil:
		return n.Tok
	case n.X != nil:
		return n.X.LastTok()
	default:
		return nil
	}
}

func (n *ParamExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ParamExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *FromExpr) FirstTok() Token {
	switch {
	case n.Kind != nil:
		return n.Kind
	case n.FromTok != nil:
		return n.FromTok
	case n.X != nil:
		return n.X.FirstTok()
	default:
		return nil
	}
}

func (n *FromExpr) LastTok() Token {
	switch {
	case n.X != nil:
		return n.X.LastTok()
	case n.FromTok != nil:
		return n.FromTok
	case n.Kind != nil:
		return n.Kind
	default:
		return nil
	}
}

func (n *FromExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *FromExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ModifiesExpr) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.X != nil:
		return n.X.FirstTok()
	case n.Assign != nil:
		return n.Assign
	case n.Y != nil:
		return n.Y.FirstTok()
	default:
		return nil
	}
}

func (n *ModifiesExpr) LastTok() Token {
	switch {
	case n.Y != nil:
		return n.Y.LastTok()
	case n.Assign != nil:
		return n.Assign
	case n.X != nil:
		return n.X.LastTok()
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *ModifiesExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ModifiesExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *RegexpExpr) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.NoCase != nil:
		return n.NoCase
	case n.X != nil:
		return n.X.FirstTok()
	default:
		return nil
	}
}

func (n *RegexpExpr) LastTok() Token {
	switch {
	case n.X != nil:
		return n.X.LastTok()
	case n.NoCase != nil:
		return n.NoCase
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *RegexpExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *RegexpExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *PatternExpr) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.NoCase != nil:
		return n.NoCase
	case n.X != nil:
		return n.X.FirstTok()
	default:
		return nil
	}
}

func (n *PatternExpr) LastTok() Token {
	switch {
	case n.X != nil:
		return n.X.LastTok()
	case n.NoCase != nil:
		return n.NoCase
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *PatternExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *PatternExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *DecmatchExpr) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.Params != nil:
		return n.Params.FirstTok()
	case n.X != nil:
		return n.X.FirstTok()
	default:
		return nil
	}
}

func (n *DecmatchExpr) LastTok() Token {
	switch {
	case n.X != nil:
		return n.X.LastTok()
	case n.Params != nil:
		return n.Params.LastTok()
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *DecmatchExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *DecmatchExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *DecodedExpr) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.Params != nil:
		return n.Params.FirstTok()
	case n.X != nil:
		return n.X.FirstTok()
	default:
		return nil
	}
}

func (n *DecodedExpr) LastTok() Token {
	switch {
	case n.X != nil:
		return n.X.LastTok()
	case n.Params != nil:
		return n.Params.LastTok()
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *DecodedExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *DecodedExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *DefKindExpr) FirstTok() Token {
	switch {
	case n.Kind != nil:
		return n.Kind
	case len(n.List) > 0:
		return n.List[0].FirstTok()
	default:
		return nil
	}
}

func (n *DefKindExpr) LastTok() Token {
	switch {
	case len(n.List) > 0:
		return n.List[len(n.List)-1].LastTok()
	case n.Kind != nil:
		return n.Kind
	default:
		return nil
	}
}

func (n *DefKindExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *DefKindExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ExceptExpr) FirstTok() Token {
	switch {
	case n.X != nil:
		return n.X.FirstTok()
	case n.ExceptTok != nil:
		return n.ExceptTok
	case n.LBrace != nil:
		return n.LBrace
	case len(n.List) > 0:
		return n.List[0].FirstTok()
	case n.RBrace != nil:
		return n.RBrace
	default:
		return nil
	}
}

func (n *ExceptExpr) LastTok() Token {
	switch {
	case n.RBrace != nil:
		return n.RBrace
	case len(n.List) > 0:
		return n.List[len(n.List)-1].LastTok()
	case n.LBrace != nil:
		return n.LBrace
	case n.ExceptTok != nil:
		return n.ExceptTok
	case n.X != nil:
		return n.X.LastTok()
	default:
		return nil
	}
}

func (n *ExceptExpr) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ExceptExpr) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *BlockStmt) FirstTok() Token {
	switch {
	case n.LBrace != nil:
		return n.LBrace
	case len(n.Stmts) > 0:
		return n.Stmts[0].FirstTok()
	case n.RBrace != nil:
		return n.RBrace
	default:
		return nil
	}
}

func (n *BlockStmt) LastTok() Token {
	switch {
	case n.RBrace != nil:
		return n.RBrace
	case len(n.Stmts) > 0:
		return n.Stmts[len(n.Stmts)-1].LastTok()
	case n.LBrace != nil:
		return n.LBrace
	default:
		return nil
	}
}

func (n *BlockStmt) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *BlockStmt) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *DeclStmt) FirstTok() Token {
	switch {
	case n.Decl != nil:
		return n.Decl.FirstTok()
	default:
		return nil
	}
}

func (n *DeclStmt) LastTok() Token {
	switch {
	case n.Decl != nil:
		return n.Decl.LastTok()
	default:
		return nil
	}
}

func (n *DeclStmt) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *DeclStmt) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ExprStmt) FirstTok() Token {
	switch {
	case n.Expr != nil:
		return n.Expr.FirstTok()
	default:
		return nil
	}
}

func (n *ExprStmt) LastTok() Token {
	switch {
	case n.Expr != nil:
		return n.Expr.LastTok()
	default:
		return nil
	}
}

func (n *ExprStmt) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ExprStmt) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *BranchStmt) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.Label != nil:
		return n.Label.FirstTok()
	default:
		return nil
	}
}

func (n *BranchStmt) LastTok() Token {
	switch {
	case n.Label != nil:
		return n.Label.LastTok()
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *BranchStmt) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *BranchStmt) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ReturnStmt) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.Result != nil:
		return n.Result.FirstTok()
	default:
		return nil
	}
}

func (n *ReturnStmt) LastTok() Token {
	switch {
	case n.Result != nil:
		return n.Result.LastTok()
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *ReturnStmt) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ReturnStmt) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *AltStmt) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.NoDefault != nil:
		return n.NoDefault
	case n.Body != nil:
		return n.Body.FirstTok()
	default:
		return nil
	}
}

func (n *AltStmt) LastTok() Token {
	switch {
	case n.Body != nil:
		return n.Body.LastTok()
	case n.NoDefault != nil:
		return n.NoDefault
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *AltStmt) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *AltStmt) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *CallStmt) FirstTok() Token {
	switch {
	case n.Stmt != nil:
		return n.Stmt.FirstTok()
	case n.Body != nil:
		return n.Body.FirstTok()
	default:
		return nil
	}
}

func (n *CallStmt) LastTok() Token {
	switch {
	case n.Body != nil:
		return n.Body.LastTok()
	case n.Stmt != nil:
		return n.Stmt.LastTok()
	default:
		return nil
	}
}

func (n *CallStmt) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *CallStmt) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ForStmt) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.LParen != nil:
		return n.LParen
	case n.Init != nil:
		return n.Init.FirstTok()
	case n.InitSemi != nil:
		return n.InitSemi
	case n.Cond != nil:
		return n.Cond.FirstTok()
	case n.CondSemi != nil:
		return n.CondSemi
	case n.Post != nil:
		return n.Post.FirstTok()
	case n.RParen != nil:
		return n.RParen
	case n.Body != nil:
		return n.Body.FirstTok()
	default:
		return nil
	}
}

func (n *ForStmt) LastTok() Token {
	switch {
	case n.Body != nil:
		return n.Body.LastTok()
	case n.RParen != nil:
		return n.RParen
	case n.Post != nil:
		return n.Post.LastTok()
	case n.CondSemi != nil:
		return n.CondSemi
	case n.Cond != nil:
		return n.Cond.LastTok()
	case n.InitSemi != nil:
		return n.InitSemi
	case n.Init != nil:
		return n.Init.LastTok()
	case n.LParen != nil:
		return n.LParen
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *ForStmt) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ForStmt) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *WhileStmt) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.Cond != nil:
		return n.Cond.FirstTok()
	case n.Body != nil:
		return n.Body.FirstTok()
	default:
		return nil
	}
}

func (n *WhileStmt) LastTok() Token {
	switch {
	case n.Body != nil:
		return n.Body.LastTok()
	case n.Cond != nil:
		return n.Cond.LastTok()
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *WhileStmt) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *WhileStmt) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *DoWhileStmt) FirstTok() Token {
	switch {
	case n.DoTok != nil:
		return n.DoTok
	case n.Body != nil:
		return n.Body.FirstTok()
	case n.WhileTok != nil:
		return n.WhileTok
	case n.Cond != nil:
		return n.Cond.FirstTok()
	default:
		return nil
	}
}

func (n *DoWhileStmt) LastTok() Token {
	switch {
	case n.Cond != nil:
		return n.Cond.LastTok()
	case n.WhileTok != nil:
		return n.WhileTok
	case n.Body != nil:
		return n.Body.LastTok()
	case n.DoTok != nil:
		return n.DoTok
	default:
		return nil
	}
}

func (n *DoWhileStmt) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *DoWhileStmt) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *IfStmt) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.Cond != nil:
		return n.Cond.FirstTok()
	case n.Then != nil:
		return n.Then.FirstTok()
	case n.ElseTok != nil:
		return n.ElseTok
	case n.Else != nil:
		return n.Else.FirstTok()
	default:
		return nil
	}
}

func (n *IfStmt) LastTok() Token {
	switch {
	case n.Else != nil:
		return n.Else.LastTok()
	case n.ElseTok != nil:
		return n.ElseTok
	case n.Then != nil:
		return n.Then.LastTok()
	case n.Cond != nil:
		return n.Cond.LastTok()
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *IfStmt) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *IfStmt) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *SelectStmt) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.Union != nil:
		return n.Union
	case n.Tag != nil:
		return n.Tag.FirstTok()
	case n.LBrace != nil:
		return n.LBrace
	case len(n.Body) > 0:
		return n.Body[0].FirstTok()
	case n.RBrace != nil:
		return n.RBrace
	default:
		return nil
	}
}

func (n *SelectStmt) LastTok() Token {
	switch {
	case n.RBrace != nil:
		return n.RBrace
	case len(n.Body) > 0:
		return n.Body[len(n.Body)-1].LastTok()
	case n.LBrace != nil:
		return n.LBrace
	case n.Tag != nil:
		return n.Tag.LastTok()
	case n.Union != nil:
		return n.Union
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *SelectStmt) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *SelectStmt) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *CaseClause) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.Case != nil:
		return n.Case.FirstTok()
	case n.Body != nil:
		return n.Body.FirstTok()
	default:
		return nil
	}
}

func (n *CaseClause) LastTok() Token {
	switch {
	case n.Body != nil:
		return n.Body.LastTok()
	case n.Case != nil:
		return n.Case.LastTok()
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *CaseClause) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *CaseClause) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *CommClause) FirstTok() Token {
	switch {
	case n.LBrack != nil:
		return n.LBrack
	case n.X != nil:
		return n.X.FirstTok()
	case n.Else != nil:
		return n.Else
	case n.RBrack != nil:
		return n.RBrack
	case n.Comm != nil:
		return n.Comm.FirstTok()
	case n.Body != nil:
		return n.Body.FirstTok()
	default:
		return nil
	}
}

func (n *CommClause) LastTok() Token {
	switch {
	case n.Body != nil:
		return n.Body.LastTok()
	case n.Comm != nil:
		return n.Comm.LastTok()
	case n.RBrack != nil:
		return n.RBrack
	case n.Else != nil:
		return n.Else
	case n.X != nil:
		return n.X.LastTok()
	case n.LBrack != nil:
		return n.LBrack
	default:
		return nil
	}
}

func (n *CommClause) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *CommClause) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *Field) FirstTok() Token {
	switch {
	case n.DefaultTok != nil:
		return n.DefaultTok
	case n.Type != nil:
		return n.Type.FirstTok()
	case n.Name != nil:
		return n.Name.FirstTok()
	case len(n.ArrayDef) > 0:
		return n.ArrayDef[0].FirstTok()
	case n.TypePars != nil:
		return n.TypePars.FirstTok()
	case n.ValueConstraint != nil:
		return n.ValueConstraint.FirstTok()
	case n.LengthConstraint != nil:
		return n.LengthConstraint.FirstTok()
	case n.Optional != nil:
		return n.Optional
	default:
		return nil
	}
}

func (n *Field) LastTok() Token {
	switch {
	case n.Optional != nil:
		return n.Optional
	case n.LengthConstraint != nil:
		return n.LengthConstraint.LastTok()
	case n.ValueConstraint != nil:
		return n.ValueConstraint.LastTok()
	case n.TypePars != nil:
		return n.TypePars.LastTok()
	case len(n.ArrayDef) > 0:
		return n.ArrayDef[len(n.ArrayDef)-1].LastTok()
	case n.Name != nil:
		return n.Name.LastTok()
	case n.Type != nil:
		return n.Type.LastTok()
	case n.DefaultTok != nil:
		return n.DefaultTok
	default:
		return nil
	}
}

func (n *Field) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *Field) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *RefSpec) FirstTok() Token {
	switch {
	case n.X != nil:
		return n.X.FirstTok()
	default:
		return nil
	}
}

func (n *RefSpec) LastTok() Token {
	switch {
	case n.X != nil:
		return n.X.LastTok()
	default:
		return nil
	}
}

func (n *RefSpec) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *RefSpec) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *StructSpec) FirstTok() Token {
	switch {
	case n.Kind != nil:
		return n.Kind
	case n.LBrace != nil:
		return n.LBrace
	case len(n.Fields) > 0:
		return n.Fields[0].FirstTok()
	case n.RBrace != nil:
		return n.RBrace
	default:
		return nil
	}
}

func (n *StructSpec) LastTok() Token {
	switch {
	case n.RBrace != nil:
		return n.RBrace
	case len(n.Fields) > 0:
		return n.Fields[len(n.Fields)-1].LastTok()
	case n.LBrace != nil:
		return n.LBrace
	case n.Kind != nil:
		return n.Kind
	default:
		return nil
	}
}

func (n *StructSpec) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *StructSpec) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ListSpec) FirstTok() Token {
	switch {
	case n.Kind != nil:
		return n.Kind
	case n.Length != nil:
		return n.Length.FirstTok()
	case n.OfTok != nil:
		return n.OfTok
	case n.ElemType != nil:
		return n.ElemType.FirstTok()
	default:
		return nil
	}
}

func (n *ListSpec) LastTok() Token {
	switch {
	case n.ElemType != nil:
		return n.ElemType.LastTok()
	case n.OfTok != nil:
		return n.OfTok
	case n.Length != nil:
		return n.Length.LastTok()
	case n.Kind != nil:
		return n.Kind
	default:
		return nil
	}
}

func (n *ListSpec) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ListSpec) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *EnumSpec) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.LBrace != nil:
		return n.LBrace
	case len(n.Enums) > 0:
		return n.Enums[0].FirstTok()
	case n.RBrace != nil:
		return n.RBrace
	default:
		return nil
	}
}

func (n *EnumSpec) LastTok() Token {
	switch {
	case n.RBrace != nil:
		return n.RBrace
	case len(n.Enums) > 0:
		return n.Enums[len(n.Enums)-1].LastTok()
	case n.LBrace != nil:
		return n.LBrace
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *EnumSpec) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *EnumSpec) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *BehaviourSpec) FirstTok() Token {
	switch {
	case n.Kind != nil:
		return n.Kind
	case n.Params != nil:
		return n.Params.FirstTok()
	case n.RunsOn != nil:
		return n.RunsOn.FirstTok()
	case n.System != nil:
		return n.System.FirstTok()
	case n.Return != nil:
		return n.Return.FirstTok()
	default:
		return nil
	}
}

func (n *BehaviourSpec) LastTok() Token {
	switch {
	case n.Return != nil:
		return n.Return.LastTok()
	case n.System != nil:
		return n.System.LastTok()
	case n.RunsOn != nil:
		return n.RunsOn.LastTok()
	case n.Params != nil:
		return n.Params.LastTok()
	case n.Kind != nil:
		return n.Kind
	default:
		return nil
	}
}

func (n *BehaviourSpec) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *BehaviourSpec) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ValueDecl) FirstTok() Token {
	switch {
	case n.Kind != nil:
		return n.Kind
	case n.TemplateRestriction != nil:
		return n.TemplateRestriction.FirstTok()
	case n.Modif != nil:
		return n.Modif
	case n.Type != nil:
		return n.Type.FirstTok()
	case len(n.Decls) > 0:
		return n.Decls[0].FirstTok()
	case n.With != nil:
		return n.With.FirstTok()
	default:
		return nil
	}
}

func (n *ValueDecl) LastTok() Token {
	switch {
	case n.With != nil:
		return n.With.LastTok()
	case len(n.Decls) > 0:
		return n.Decls[len(n.Decls)-1].LastTok()
	case n.Type != nil:
		return n.Type.LastTok()
	case n.Modif != nil:
		return n.Modif
	case n.TemplateRestriction != nil:
		return n.TemplateRestriction.LastTok()
	case n.Kind != nil:
		return n.Kind
	default:
		return nil
	}
}

func (n *ValueDecl) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ValueDecl) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *Declarator) FirstTok() Token {
	switch {
	case n.Name != nil:
		return n.Name.FirstTok()
	case len(n.ArrayDef) > 0:
		return n.ArrayDef[0].FirstTok()
	case n.AssignTok != nil:
		return n.AssignTok
	case n.Value != nil:
		return n.Value.FirstTok()
	default:
		return nil
	}
}

func (n *Declarator) LastTok() Token {
	switch {
	case n.Value != nil:
		return n.Value.LastTok()
	case n.AssignTok != nil:
		return n.AssignTok
	case len(n.ArrayDef) > 0:
		return n.ArrayDef[len(n.ArrayDef)-1].LastTok()
	case n.Name != nil:
		return n.Name.LastTok()
	default:
		return nil
	}
}

func (n *Declarator) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *Declarator) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *TemplateDecl) FirstTok() Token {
	switch {
	case n.RestrictionSpec != nil:
		return n.RestrictionSpec.FirstTok()
	case n.Modif != nil:
		return n.Modif
	case n.Type != nil:
		return n.Type.FirstTok()
	case n.Name != nil:
		return n.Name.FirstTok()
	case n.TypePars != nil:
		return n.TypePars.FirstTok()
	case n.Params != nil:
		return n.Params.FirstTok()
	case n.ModifiesTok != nil:
		return n.ModifiesTok
	case n.Base != nil:
		return n.Base.FirstTok()
	case n.AssignTok != nil:
		return n.AssignTok
	case n.Value != nil:
		return n.Value.FirstTok()
	case n.With != nil:
		return n.With.FirstTok()
	default:
		return nil
	}
}

func (n *TemplateDecl) LastTok() Token {
	switch {
	case n.With != nil:
		return n.With.LastTok()
	case n.Value != nil:
		return n.Value.LastTok()
	case n.AssignTok != nil:
		return n.AssignTok
	case n.Base != nil:
		return n.Base.LastTok()
	case n.ModifiesTok != nil:
		return n.ModifiesTok
	case n.Params != nil:
		return n.Params.LastTok()
	case n.TypePars != nil:
		return n.TypePars.LastTok()
	case n.Name != nil:
		return n.Name.LastTok()
	case n.Type != nil:
		return n.Type.LastTok()
	case n.Modif != nil:
		return n.Modif
	case n.RestrictionSpec != nil:
		return n.RestrictionSpec.LastTok()
	default:
		return nil
	}
}

func (n *TemplateDecl) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *TemplateDecl) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ModuleParameterGroup) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.LBrace != nil:
		return n.LBrace
	case len(n.Decls) > 0:
		return n.Decls[0].FirstTok()
	case n.RBrace != nil:
		return n.RBrace
	case n.With != nil:
		return n.With.FirstTok()
	default:
		return nil
	}
}

func (n *ModuleParameterGroup) LastTok() Token {
	switch {
	case n.With != nil:
		return n.With.LastTok()
	case n.RBrace != nil:
		return n.RBrace
	case len(n.Decls) > 0:
		return n.Decls[len(n.Decls)-1].LastTok()
	case n.LBrace != nil:
		return n.LBrace
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *ModuleParameterGroup) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ModuleParameterGroup) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *FuncDecl) FirstTok() Token {
	switch {
	case n.External != nil:
		return n.External
	case n.Kind != nil:
		return n.Kind
	case n.Name != nil:
		return n.Name.FirstTok()
	case n.Modif != nil:
		return n.Modif
	case n.TypePars != nil:
		return n.TypePars.FirstTok()
	case n.Params != nil:
		return n.Params.FirstTok()
	case n.RunsOn != nil:
		return n.RunsOn.FirstTok()
	case n.Mtc != nil:
		return n.Mtc.FirstTok()
	case n.System != nil:
		return n.System.FirstTok()
	case n.Return != nil:
		return n.Return.FirstTok()
	case n.Body != nil:
		return n.Body.FirstTok()
	case n.With != nil:
		return n.With.FirstTok()
	default:
		return nil
	}
}

func (n *FuncDecl) LastTok() Token {
	switch {
	case n.With != nil:
		return n.With.LastTok()
	case n.Body != nil:
		return n.Body.LastTok()
	case n.Return != nil:
		return n.Return.LastTok()
	case n.System != nil:
		return n.System.LastTok()
	case n.Mtc != nil:
		return n.Mtc.LastTok()
	case n.RunsOn != nil:
		return n.RunsOn.LastTok()
	case n.Params != nil:
		return n.Params.LastTok()
	case n.TypePars != nil:
		return n.TypePars.LastTok()
	case n.Modif != nil:
		return n.Modif
	case n.Name != nil:
		return n.Name.LastTok()
	case n.Kind != nil:
		return n.Kind
	case n.External != nil:
		return n.External
	default:
		return nil
	}
}

func (n *FuncDecl) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *FuncDecl) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *SignatureDecl) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.Name != nil:
		return n.Name.FirstTok()
	case n.TypePars != nil:
		return n.TypePars.FirstTok()
	case n.Params != nil:
		return n.Params.FirstTok()
	case n.NoBlock != nil:
		return n.NoBlock
	case n.Return != nil:
		return n.Return.FirstTok()
	case n.ExceptionTok != nil:
		return n.ExceptionTok
	case n.Exception != nil:
		return n.Exception.FirstTok()
	case n.With != nil:
		return n.With.FirstTok()
	default:
		return nil
	}
}

func (n *SignatureDecl) LastTok() Token {
	switch {
	case n.With != nil:
		return n.With.LastTok()
	case n.Exception != nil:
		return n.Exception.LastTok()
	case n.ExceptionTok != nil:
		return n.ExceptionTok
	case n.Return != nil:
		return n.Return.LastTok()
	case n.NoBlock != nil:
		return n.NoBlock
	case n.Params != nil:
		return n.Params.LastTok()
	case n.TypePars != nil:
		return n.TypePars.LastTok()
	case n.Name != nil:
		return n.Name.LastTok()
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *SignatureDecl) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *SignatureDecl) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *SubTypeDecl) FirstTok() Token {
	switch {
	case n.TypeTok != nil:
		return n.TypeTok
	case n.Field != nil:
		return n.Field.FirstTok()
	case n.With != nil:
		return n.With.FirstTok()
	default:
		return nil
	}
}

func (n *SubTypeDecl) LastTok() Token {
	switch {
	case n.With != nil:
		return n.With.LastTok()
	case n.Field != nil:
		return n.Field.LastTok()
	case n.TypeTok != nil:
		return n.TypeTok
	default:
		return nil
	}
}

func (n *SubTypeDecl) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *SubTypeDecl) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *StructTypeDecl) FirstTok() Token {
	switch {
	case n.TypeTok != nil:
		return n.TypeTok
	case n.Kind != nil:
		return n.Kind
	case n.Name != nil:
		return n.Name.FirstTok()
	case n.TypePars != nil:
		return n.TypePars.FirstTok()
	case n.LBrace != nil:
		return n.LBrace
	case len(n.Fields) > 0:
		return n.Fields[0].FirstTok()
	case n.RBrace != nil:
		return n.RBrace
	case n.With != nil:
		return n.With.FirstTok()
	default:
		return nil
	}
}

func (n *StructTypeDecl) LastTok() Token {
	switch {
	case n.With != nil:
		return n.With.LastTok()
	case n.RBrace != nil:
		return n.RBrace
	case len(n.Fields) > 0:
		return n.Fields[len(n.Fields)-1].LastTok()
	case n.LBrace != nil:
		return n.LBrace
	case n.TypePars != nil:
		return n.TypePars.LastTok()
	case n.Name != nil:
		return n.Name.LastTok()
	case n.Kind != nil:
		return n.Kind
	case n.TypeTok != nil:
		return n.TypeTok
	default:
		return nil
	}
}

func (n *StructTypeDecl) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *StructTypeDecl) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *EnumTypeDecl) FirstTok() Token {
	switch {
	case n.TypeTok != nil:
		return n.TypeTok
	case n.EnumTok != nil:
		return n.EnumTok
	case n.Name != nil:
		return n.Name.FirstTok()
	case n.TypePars != nil:
		return n.TypePars.FirstTok()
	case n.LBrace != nil:
		return n.LBrace
	case len(n.Enums) > 0:
		return n.Enums[0].FirstTok()
	case n.RBrace != nil:
		return n.RBrace
	case n.With != nil:
		return n.With.FirstTok()
	default:
		return nil
	}
}

func (n *EnumTypeDecl) LastTok() Token {
	switch {
	case n.With != nil:
		return n.With.LastTok()
	case n.RBrace != nil:
		return n.RBrace
	case len(n.Enums) > 0:
		return n.Enums[len(n.Enums)-1].LastTok()
	case n.LBrace != nil:
		return n.LBrace
	case n.TypePars != nil:
		return n.TypePars.LastTok()
	case n.Name != nil:
		return n.Name.LastTok()
	case n.EnumTok != nil:
		return n.EnumTok
	case n.TypeTok != nil:
		return n.TypeTok
	default:
		return nil
	}
}

func (n *EnumTypeDecl) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *EnumTypeDecl) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *BehaviourTypeDecl) FirstTok() Token {
	switch {
	case n.TypeTok != nil:
		return n.TypeTok
	case n.Kind != nil:
		return n.Kind
	case n.Name != nil:
		return n.Name.FirstTok()
	case n.TypePars != nil:
		return n.TypePars.FirstTok()
	case n.Params != nil:
		return n.Params.FirstTok()
	case n.RunsOn != nil:
		return n.RunsOn.FirstTok()
	case n.System != nil:
		return n.System.FirstTok()
	case n.Return != nil:
		return n.Return.FirstTok()
	case n.With != nil:
		return n.With.FirstTok()
	default:
		return nil
	}
}

func (n *BehaviourTypeDecl) LastTok() Token {
	switch {
	case n.With != nil:
		return n.With.LastTok()
	case n.Return != nil:
		return n.Return.LastTok()
	case n.System != nil:
		return n.System.LastTok()
	case n.RunsOn != nil:
		return n.RunsOn.LastTok()
	case n.Params != nil:
		return n.Params.LastTok()
	case n.TypePars != nil:
		return n.TypePars.LastTok()
	case n.Name != nil:
		return n.Name.LastTok()
	case n.Kind != nil:
		return n.Kind
	case n.TypeTok != nil:
		return n.TypeTok
	default:
		return nil
	}
}

func (n *BehaviourTypeDecl) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *BehaviourTypeDecl) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *PortTypeDecl) FirstTok() Token {
	switch {
	case n.TypeTok != nil:
		return n.TypeTok
	case n.PortTok != nil:
		return n.PortTok
	case n.Name != nil:
		return n.Name.FirstTok()
	case n.TypePars != nil:
		return n.TypePars.FirstTok()
	case n.Kind != nil:
		return n.Kind
	case n.Realtime != nil:
		return n.Realtime
	case n.LBrace != nil:
		return n.LBrace
	case len(n.Attrs) > 0:
		return n.Attrs[0].FirstTok()
	case n.RBrace != nil:
		return n.RBrace
	case n.With != nil:
		return n.With.FirstTok()
	default:
		return nil
	}
}

func (n *PortTypeDecl) LastTok() Token {
	switch {
	case n.With != nil:
		return n.With.LastTok()
	case n.RBrace != nil:
		return n.RBrace
	case len(n.Attrs) > 0:
		return n.Attrs[len(n.Attrs)-1].LastTok()
	case n.LBrace != nil:
		return n.LBrace
	case n.Realtime != nil:
		return n.Realtime
	case n.Kind != nil:
		return n.Kind
	case n.TypePars != nil:
		return n.TypePars.LastTok()
	case n.Name != nil:
		return n.Name.LastTok()
	case n.PortTok != nil:
		return n.PortTok
	case n.TypeTok != nil:
		return n.TypeTok
	default:
		return nil
	}
}

func (n *PortTypeDecl) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *PortTypeDecl) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *PortAttribute) FirstTok() Token {
	switch {
	case n.Kind != nil:
		return n.Kind
	case len(n.Types) > 0:
		return n.Types[0].FirstTok()
	default:
		return nil
	}
}

func (n *PortAttribute) LastTok() Token {
	switch {
	case len(n.Types) > 0:
		return n.Types[len(n.Types)-1].LastTok()
	case n.Kind != nil:
		return n.Kind
	default:
		return nil
	}
}

func (n *PortAttribute) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *PortAttribute) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *PortMapAttribute) FirstTok() Token {
	switch {
	case n.MapTok != nil:
		return n.MapTok
	case n.ParamTok != nil:
		return n.ParamTok
	case n.Params != nil:
		return n.Params.FirstTok()
	default:
		return nil
	}
}

func (n *PortMapAttribute) LastTok() Token {
	switch {
	case n.Params != nil:
		return n.Params.LastTok()
	case n.ParamTok != nil:
		return n.ParamTok
	case n.MapTok != nil:
		return n.MapTok
	default:
		return nil
	}
}

func (n *PortMapAttribute) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *PortMapAttribute) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ComponentTypeDecl) FirstTok() Token {
	switch {
	case n.TypeTok != nil:
		return n.TypeTok
	case n.CompTok != nil:
		return n.CompTok
	case n.Name != nil:
		return n.Name.FirstTok()
	case n.TypePars != nil:
		return n.TypePars.FirstTok()
	case n.ExtendsTok != nil:
		return n.ExtendsTok
	case len(n.Extends) > 0:
		return n.Extends[0].FirstTok()
	case n.Body != nil:
		return n.Body.FirstTok()
	case n.With != nil:
		return n.With.FirstTok()
	default:
		return nil
	}
}

func (n *ComponentTypeDecl) LastTok() Token {
	switch {
	case n.With != nil:
		return n.With.LastTok()
	case n.Body != nil:
		return n.Body.LastTok()
	case len(n.Extends) > 0:
		return n.Extends[len(n.Extends)-1].LastTok()
	case n.ExtendsTok != nil:
		return n.ExtendsTok
	case n.TypePars != nil:
		return n.TypePars.LastTok()
	case n.Name != nil:
		return n.Name.LastTok()
	case n.CompTok != nil:
		return n.CompTok
	case n.TypeTok != nil:
		return n.TypeTok
	default:
		return nil
	}
}

func (n *ComponentTypeDecl) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ComponentTypeDecl) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *Module) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.Name != nil:
		return n.Name.FirstTok()
	case n.Language != nil:
		return n.Language.FirstTok()
	case n.LBrace != nil:
		return n.LBrace
	case len(n.Defs) > 0:
		return n.Defs[0].FirstTok()
	case n.RBrace != nil:
		return n.RBrace
	case n.With != nil:
		return n.With.FirstTok()
	default:
		return nil
	}
}

func (n *Module) LastTok() Token {
	switch {
	case n.With != nil:
		return n.With.LastTok()
	case n.RBrace != nil:
		return n.RBrace
	case len(n.Defs) > 0:
		return n.Defs[len(n.Defs)-1].LastTok()
	case n.LBrace != nil:
		return n.LBrace
	case n.Language != nil:
		return n.Language.LastTok()
	case n.Name != nil:
		return n.Name.LastTok()
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *Module) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *Module) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ModuleDef) FirstTok() Token {
	switch {
	case n.Visibility != nil:
		return n.Visibility
	case n.Def != nil:
		return n.Def.FirstTok()
	default:
		return nil
	}
}

func (n *ModuleDef) LastTok() Token {
	switch {
	case n.Def != nil:
		return n.Def.LastTok()
	case n.Visibility != nil:
		return n.Visibility
	default:
		return nil
	}
}

func (n *ModuleDef) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ModuleDef) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ControlPart) FirstTok() Token {
	switch {
	case n.Name != nil:
		return n.Name.FirstTok()
	case n.Body != nil:
		return n.Body.FirstTok()
	case n.With != nil:
		return n.With.FirstTok()
	default:
		return nil
	}
}

func (n *ControlPart) LastTok() Token {
	switch {
	case n.With != nil:
		return n.With.LastTok()
	case n.Body != nil:
		return n.Body.LastTok()
	case n.Name != nil:
		return n.Name.LastTok()
	default:
		return nil
	}
}

func (n *ControlPart) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ControlPart) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ImportDecl) FirstTok() Token {
	switch {
	case n.ImportTok != nil:
		return n.ImportTok
	case n.FromTok != nil:
		return n.FromTok
	case n.Module != nil:
		return n.Module.FirstTok()
	case n.Language != nil:
		return n.Language.FirstTok()
	case n.LBrace != nil:
		return n.LBrace
	case len(n.List) > 0:
		return n.List[0].FirstTok()
	case n.RBrace != nil:
		return n.RBrace
	case n.With != nil:
		return n.With.FirstTok()
	default:
		return nil
	}
}

func (n *ImportDecl) LastTok() Token {
	switch {
	case n.With != nil:
		return n.With.LastTok()
	case n.RBrace != nil:
		return n.RBrace
	case len(n.List) > 0:
		return n.List[len(n.List)-1].LastTok()
	case n.LBrace != nil:
		return n.LBrace
	case n.Language != nil:
		return n.Language.LastTok()
	case n.Module != nil:
		return n.Module.LastTok()
	case n.FromTok != nil:
		return n.FromTok
	case n.ImportTok != nil:
		return n.ImportTok
	default:
		return nil
	}
}

func (n *ImportDecl) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ImportDecl) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *GroupDecl) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.Name != nil:
		return n.Name.FirstTok()
	case n.LBrace != nil:
		return n.LBrace
	case len(n.Defs) > 0:
		return n.Defs[0].FirstTok()
	case n.RBrace != nil:
		return n.RBrace
	case n.With != nil:
		return n.With.FirstTok()
	default:
		return nil
	}
}

func (n *GroupDecl) LastTok() Token {
	switch {
	case n.With != nil:
		return n.With.LastTok()
	case n.RBrace != nil:
		return n.RBrace
	case len(n.Defs) > 0:
		return n.Defs[len(n.Defs)-1].LastTok()
	case n.LBrace != nil:
		return n.LBrace
	case n.Name != nil:
		return n.Name.LastTok()
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *GroupDecl) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *GroupDecl) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *FriendDecl) FirstTok() Token {
	switch {
	case n.FriendTok != nil:
		return n.FriendTok
	case n.ModuleTok != nil:
		return n.ModuleTok
	case n.Module != nil:
		return n.Module.FirstTok()
	case n.With != nil:
		return n.With.FirstTok()
	default:
		return nil
	}
}

func (n *FriendDecl) LastTok() Token {
	switch {
	case n.With != nil:
		return n.With.LastTok()
	case n.Module != nil:
		return n.Module.LastTok()
	case n.ModuleTok != nil:
		return n.ModuleTok
	case n.FriendTok != nil:
		return n.FriendTok
	default:
		return nil
	}
}

func (n *FriendDecl) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *FriendDecl) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *LanguageSpec) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case len(n.List) > 0:
		return n.List[0].FirstTok()
	default:
		return nil
	}
}

func (n *LanguageSpec) LastTok() Token {
	switch {
	case len(n.List) > 0:
		return n.List[len(n.List)-1].LastTok()
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *LanguageSpec) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *LanguageSpec) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *RestrictionSpec) FirstTok() Token {
	switch {
	case n.TemplateTok != nil:
		return n.TemplateTok
	case n.LParen != nil:
		return n.LParen
	case n.Tok != nil:
		return n.Tok
	case n.RParen != nil:
		return n.RParen
	default:
		return nil
	}
}

func (n *RestrictionSpec) LastTok() Token {
	switch {
	case n.RParen != nil:
		return n.RParen
	case n.Tok != nil:
		return n.Tok
	case n.LParen != nil:
		return n.LParen
	case n.TemplateTok != nil:
		return n.TemplateTok
	default:
		return nil
	}
}

func (n *RestrictionSpec) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *RestrictionSpec) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *RunsOnSpec) FirstTok() Token {
	switch {
	case n.RunsTok != nil:
		return n.RunsTok
	case n.OnTok != nil:
		return n.OnTok
	case n.Comp != nil:
		return n.Comp.FirstTok()
	default:
		return nil
	}
}

func (n *RunsOnSpec) LastTok() Token {
	switch {
	case n.Comp != nil:
		return n.Comp.LastTok()
	case n.OnTok != nil:
		return n.OnTok
	case n.RunsTok != nil:
		return n.RunsTok
	default:
		return nil
	}
}

func (n *RunsOnSpec) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *RunsOnSpec) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *SystemSpec) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.Comp != nil:
		return n.Comp.FirstTok()
	default:
		return nil
	}
}

func (n *SystemSpec) LastTok() Token {
	switch {
	case n.Comp != nil:
		return n.Comp.LastTok()
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *SystemSpec) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *SystemSpec) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *MtcSpec) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.Comp != nil:
		return n.Comp.FirstTok()
	default:
		return nil
	}
}

func (n *MtcSpec) LastTok() Token {
	switch {
	case n.Comp != nil:
		return n.Comp.LastTok()
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *MtcSpec) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *MtcSpec) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *ReturnSpec) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.Restriction != nil:
		return n.Restriction.FirstTok()
	case n.Modif != nil:
		return n.Modif
	case n.Type != nil:
		return n.Type.FirstTok()
	default:
		return nil
	}
}

func (n *ReturnSpec) LastTok() Token {
	switch {
	case n.Type != nil:
		return n.Type.LastTok()
	case n.Modif != nil:
		return n.Modif
	case n.Restriction != nil:
		return n.Restriction.LastTok()
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *ReturnSpec) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *ReturnSpec) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *FormalPars) FirstTok() Token {
	switch {
	case n.LParen != nil:
		return n.LParen
	case len(n.List) > 0:
		return n.List[0].FirstTok()
	case n.RParen != nil:
		return n.RParen
	default:
		return nil
	}
}

func (n *FormalPars) LastTok() Token {
	switch {
	case n.RParen != nil:
		return n.RParen
	case len(n.List) > 0:
		return n.List[len(n.List)-1].LastTok()
	case n.LParen != nil:
		return n.LParen
	default:
		return nil
	}
}

func (n *FormalPars) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *FormalPars) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *FormalPar) FirstTok() Token {
	switch {
	case n.Direction != nil:
		return n.Direction
	case n.TemplateRestriction != nil:
		return n.TemplateRestriction.FirstTok()
	case n.Modif != nil:
		return n.Modif
	case n.Type != nil:
		return n.Type.FirstTok()
	case n.Name != nil:
		return n.Name.FirstTok()
	case len(n.ArrayDef) > 0:
		return n.ArrayDef[0].FirstTok()
	case n.AssignTok != nil:
		return n.AssignTok
	case n.Value != nil:
		return n.Value.FirstTok()
	default:
		return nil
	}
}

func (n *FormalPar) LastTok() Token {
	switch {
	case n.Value != nil:
		return n.Value.LastTok()
	case n.AssignTok != nil:
		return n.AssignTok
	case len(n.ArrayDef) > 0:
		return n.ArrayDef[len(n.ArrayDef)-1].LastTok()
	case n.Name != nil:
		return n.Name.LastTok()
	case n.Type != nil:
		return n.Type.LastTok()
	case n.Modif != nil:
		return n.Modif
	case n.TemplateRestriction != nil:
		return n.TemplateRestriction.LastTok()
	case n.Direction != nil:
		return n.Direction
	default:
		return nil
	}
}

func (n *FormalPar) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *FormalPar) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *WithSpec) FirstTok() Token {
	switch {
	case n.Tok != nil:
		return n.Tok
	case n.LBrace != nil:
		return n.LBrace
	case len(n.List) > 0:
		return n.List[0].FirstTok()
	case n.RBrace != nil:
		return n.RBrace
	default:
		return nil
	}
}

func (n *WithSpec) LastTok() Token {
	switch {
	case n.RBrace != nil:
		return n.RBrace
	case len(n.List) > 0:
		return n.List[len(n.List)-1].LastTok()
	case n.LBrace != nil:
		return n.LBrace
	case n.Tok != nil:
		return n.Tok
	default:
		return nil
	}
}

func (n *WithSpec) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *WithSpec) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

func (n *WithStmt) FirstTok() Token {
	switch {
	case n.Kind != nil:
		return n.Kind
	case n.Override != nil:
		return n.Override
	case n.LParen != nil:
		return n.LParen
	case len(n.List) > 0:
		return n.List[0].FirstTok()
	case n.RParen != nil:
		return n.RParen
	case n.Value != nil:
		return n.Value.FirstTok()
	default:
		return nil
	}
}

func (n *WithStmt) LastTok() Token {
	switch {
	case n.Value != nil:
		return n.Value.LastTok()
	case n.RParen != nil:
		return n.RParen
	case len(n.List) > 0:
		return n.List[len(n.List)-1].LastTok()
	case n.LParen != nil:
		return n.LParen
	case n.Override != nil:
		return n.Override
	case n.Kind != nil:
		return n.Kind
	default:
		return nil
	}
}

func (n *WithStmt) Pos() loc.Pos {
	if tok := n.FirstTok(); tok != nil {
		return tok.Pos()
	}
	return loc.NoPos
}

func (n *WithStmt) End() loc.Pos {
	if tok := n.LastTok(); tok != nil {
		return tok.End()
	}
	return loc.NoPos
}

